// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterRequest struct {
	Role                 string            `protobuf:"bytes,1,opt,name=Role,proto3" json:"Role,omitempty"`
	Address              string            `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	Version              string            `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	Selector             map[string]string `protobuf:"bytes,4,rep,name=Selector,proto3" json:"Selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *RegisterRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegisterRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RegisterRequest) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

type RegisterResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RegisterResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type ExecRequest struct {
	Command              string   `protobuf:"bytes,1,opt,name=Command,proto3" json:"Command,omitempty"`
	Background           bool     `protobuf:"varint,2,opt,name=Background,proto3" json:"Background,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecRequest) Reset()         { *m = ExecRequest{} }
func (m *ExecRequest) String() string { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()    {}
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *ExecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecRequest.Unmarshal(m, b)
}
func (m *ExecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecRequest.Marshal(b, m, deterministic)
}
func (m *ExecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecRequest.Merge(m, src)
}
func (m *ExecRequest) XXX_Size() int {
	return xxx_messageInfo_ExecRequest.Size(m)
}
func (m *ExecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecRequest proto.InternalMessageInfo

func (m *ExecRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *ExecRequest) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

type ExecResponse struct {
	Stdout               string   `protobuf:"bytes,1,opt,name=Stdout,proto3" json:"Stdout,omitempty"`
	Stderr               string   `protobuf:"bytes,2,opt,name=Stderr,proto3" json:"Stderr,omitempty"`
	Code                 int32    `protobuf:"varint,3,opt,name=Code,proto3" json:"Code,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,4,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExecResponse) Reset()         { *m = ExecResponse{} }
func (m *ExecResponse) String() string { return proto.CompactTextString(m) }
func (*ExecResponse) ProtoMessage()    {}
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *ExecResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecResponse.Unmarshal(m, b)
}
func (m *ExecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecResponse.Marshal(b, m, deterministic)
}
func (m *ExecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecResponse.Merge(m, src)
}
func (m *ExecResponse) XXX_Size() int {
	return xxx_messageInfo_ExecResponse.Size(m)
}
func (m *ExecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecResponse proto.InternalMessageInfo

func (m *ExecResponse) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *ExecResponse) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *ExecResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ExecResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type NemesisRequest struct {
	Type                 int32             `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Arguments            map[string]string `protobuf:"bytes,3,rep,name=Arguments,proto3" json:"Arguments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ID                   string            `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Op                   int32             `protobuf:"varint,5,opt,name=Op,proto3" json:"Op,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NemesisRequest) Reset()         { *m = NemesisRequest{} }
func (m *NemesisRequest) String() string { return proto.CompactTextString(m) }
func (*NemesisRequest) ProtoMessage()    {}
func (*NemesisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *NemesisRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NemesisRequest.Unmarshal(m, b)
}
func (m *NemesisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NemesisRequest.Marshal(b, m, deterministic)
}
func (m *NemesisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NemesisRequest.Merge(m, src)
}
func (m *NemesisRequest) XXX_Size() int {
	return xxx_messageInfo_NemesisRequest.Size(m)
}
func (m *NemesisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NemesisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NemesisRequest proto.InternalMessageInfo

func (m *NemesisRequest) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *NemesisRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NemesisRequest) GetArguments() map[string]string {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *NemesisRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *NemesisRequest) GetOp() int32 {
	if m != nil {
		return m.Op
	}
	return 0
}

type NemesisResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,2,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	ID                   string   `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NemesisResponse) Reset()         { *m = NemesisResponse{} }
func (m *NemesisResponse) String() string { return proto.CompactTextString(m) }
func (*NemesisResponse) ProtoMessage()    {}
func (*NemesisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{5}
}

func (m *NemesisResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NemesisResponse.Unmarshal(m, b)
}
func (m *NemesisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NemesisResponse.Marshal(b, m, deterministic)
}
func (m *NemesisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NemesisResponse.Merge(m, src)
}
func (m *NemesisResponse) XXX_Size() int {
	return xxx_messageInfo_NemesisResponse.Size(m)
}
func (m *NemesisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NemesisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NemesisResponse proto.InternalMessageInfo

func (m *NemesisResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NemesisResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *NemesisResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "pb.RegisterRequest")
	proto.RegisterMapType((map[string]string)(nil), "pb.RegisterRequest.SelectorEntry")
	proto.RegisterType((*RegisterResponse)(nil), "pb.RegisterResponse")
	proto.RegisterType((*ExecRequest)(nil), "pb.ExecRequest")
	proto.RegisterType((*ExecResponse)(nil), "pb.ExecResponse")
	proto.RegisterType((*NemesisRequest)(nil), "pb.NemesisRequest")
	proto.RegisterMapType((map[string]string)(nil), "pb.NemesisRequest.ArgumentsEntry")
	proto.RegisterType((*NemesisResponse)(nil), "pb.NemesisResponse")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xdf, 0x8b, 0xd3, 0x40,
	0x10, 0x36, 0x49, 0x7b, 0xed, 0xcd, 0xdd, 0xb5, 0x65, 0xee, 0x90, 0x90, 0x07, 0x39, 0xf3, 0x74,
	0x20, 0xe4, 0xa1, 0x0a, 0x8a, 0x3f, 0x90, 0xda, 0x2b, 0x72, 0x82, 0x77, 0x90, 0x13, 0xc1, 0xc7,
	0xb4, 0x19, 0x42, 0xbd, 0x24, 0x1b, 0x67, 0x37, 0xc5, 0xfe, 0xa1, 0xe2, 0xbf, 0x23, 0x49, 0x76,
	0xd3, 0x46, 0x0f, 0x41, 0x7c, 0x9b, 0xef, 0xdb, 0x9d, 0xd9, 0x6f, 0xe6, 0x9b, 0x85, 0x13, 0x49,
	0xbc, 0x59, 0xaf, 0x28, 0x28, 0x58, 0x28, 0x81, 0x76, 0xb1, 0xf4, 0x7f, 0x58, 0x30, 0x0e, 0x29,
	0x59, 0x4b, 0x45, 0x1c, 0xd2, 0xb7, 0x92, 0xa4, 0x42, 0x84, 0x5e, 0x28, 0x52, 0x72, 0xad, 0x73,
	0xeb, 0xe2, 0x30, 0xac, 0x63, 0x74, 0x61, 0x30, 0x8b, 0x63, 0x26, 0x29, 0x5d, 0xbb, 0xa6, 0x0d,
	0xac, 0x4e, 0x3e, 0x13, 0xcb, 0xb5, 0xc8, 0x5d, 0xa7, 0x39, 0xd1, 0x10, 0xdf, 0xc0, 0xf0, 0x96,
	0x52, 0x5a, 0x29, 0xc1, 0x6e, 0xef, 0xdc, 0xb9, 0x38, 0x9a, 0x3e, 0x0e, 0x8a, 0x65, 0xf0, 0xdb,
	0x73, 0x81, 0xb9, 0xb3, 0xc8, 0x15, 0x6f, 0xc3, 0x36, 0xc5, 0x7b, 0x05, 0x27, 0x9d, 0x23, 0x9c,
	0x80, 0x73, 0x47, 0x5b, 0x2d, 0xab, 0x0a, 0xf1, 0x0c, 0xfa, 0x9b, 0x28, 0x2d, 0x49, 0x6b, 0x6a,
	0xc0, 0x4b, 0xfb, 0x85, 0xe5, 0x7f, 0x80, 0xc9, 0xee, 0x1d, 0x59, 0x88, 0x5c, 0x52, 0xd5, 0xd7,
	0x5c, 0xc4, 0x4d, 0x5f, 0xfd, 0xb0, 0x8e, 0xd1, 0x87, 0xe3, 0x05, 0xb3, 0xe0, 0x8f, 0x24, 0x65,
	0x94, 0x98, 0x42, 0x1d, 0xce, 0x7f, 0x0f, 0x47, 0x8b, 0xef, 0xb4, 0x32, 0xe3, 0x71, 0x61, 0x30,
	0x17, 0x59, 0x16, 0xe5, 0xb1, 0x96, 0x62, 0x20, 0x3e, 0x02, 0x78, 0x17, 0xad, 0xee, 0x12, 0x16,
	0x65, 0x1e, 0xd7, 0xa5, 0x86, 0xe1, 0x1e, 0xe3, 0x6f, 0xe0, 0xb8, 0x29, 0xa4, 0x05, 0x3d, 0x84,
	0x83, 0x5b, 0x15, 0x8b, 0x52, 0xe9, 0x42, 0x1a, 0x69, 0x9e, 0x98, 0xb5, 0x1c, 0x8d, 0xda, 0x06,
	0x9c, 0xbf, 0x34, 0xd0, 0xbb, 0xa7, 0x81, 0x9f, 0x16, 0x8c, 0xae, 0x29, 0x23, 0xb9, 0x96, 0x7b,
	0x1e, 0x7f, 0xda, 0x16, 0xed, 0x2c, 0xaa, 0xb8, 0xe2, 0xae, 0xa3, 0xcc, 0xcc, 0xa0, 0x8e, 0xf1,
	0x2d, 0x1c, 0xce, 0x38, 0x29, 0x33, 0xca, 0x95, 0x74, 0x9d, 0x9d, 0x89, 0xdd, 0x72, 0x41, 0x7b,
	0xa7, 0x31, 0x71, 0x97, 0x83, 0x23, 0xb0, 0xaf, 0x2e, 0xb5, 0x2a, 0xfb, 0xea, 0xb2, 0xc2, 0x37,
	0x85, 0xdb, 0xaf, 0x9f, 0xb5, 0x6f, 0x0a, 0xef, 0x35, 0x8c, 0xba, 0xc9, 0xff, 0x64, 0xf3, 0x17,
	0x18, 0xb7, 0x4a, 0xfe, 0xcf, 0x65, 0x2d, 0xd4, 0x31, 0x42, 0xa7, 0x0b, 0x80, 0xb9, 0xc8, 0x15,
	0x8b, 0x34, 0x25, 0xc6, 0xe7, 0x30, 0x34, 0xfb, 0x84, 0xa7, 0xf7, 0x6c, 0xb1, 0x77, 0xd6, 0x25,
	0x1b, 0x31, 0xfe, 0x83, 0xe9, 0x57, 0xe8, 0xcf, 0x12, 0xca, 0x15, 0x3e, 0x81, 0x5e, 0x65, 0x3e,
	0x8e, 0xab, 0x8b, 0x7b, 0xfb, 0xe4, 0x4d, 0x76, 0x84, 0xc9, 0xc2, 0x67, 0x30, 0xd0, 0x7d, 0x21,
	0xfe, 0x39, 0x6e, 0xef, 0xb4, 0xc3, 0x99, 0xac, 0xe5, 0x41, 0xfd, 0xaf, 0x9f, 0xfe, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0xeb, 0x4b, 0x97, 0x25, 0xe8, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/pb.Controller/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Controller/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Controller_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentClient interface {
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	Nemesis(ctx context.Context, in *NemesisRequest, opts ...grpc.CallOption) (*NemesisResponse, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/pb.Agent/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Nemesis(ctx context.Context, in *NemesisRequest, opts ...grpc.CallOption) (*NemesisResponse, error) {
	out := new(NemesisResponse)
	err := c.cc.Invoke(ctx, "/pb.Agent/Nemesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
type AgentServer interface {
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	Nemesis(context.Context, *NemesisRequest) (*NemesisResponse, error)
}

// UnimplementedAgentServer can be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (*UnimplementedAgentServer) Exec(ctx context.Context, req *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (*UnimplementedAgentServer) Nemesis(ctx context.Context, req *NemesisRequest) (*NemesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nemesis not implemented")
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Agent/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Nemesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NemesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Nemesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Agent/Nemesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Nemesis(ctx, req.(*NemesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _Agent_Exec_Handler,
		},
		{
			MethodName: "Nemesis",
			Handler:    _Agent_Nemesis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
