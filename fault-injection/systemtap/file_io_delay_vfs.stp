#! /usr/bin/env stap

/*
 * file_io_delay_vfs.stp Inject IO delay to the process
 *
 * stap file_io_delay_vfs.stp -g -x pid [<r|w|rw>] [delay] [max_delay] [dir_name]
 * [<r|w|rw>] means to inject delay for read, write or read and write, default "rw".
 * [delay] is the min delay us
 * [max_delay] is max delay us if max_delay > delay
 * [dir_name] limit the range of delay injected.
 */

global type = "rw"
global dir_name = ""
global delay = 300
global max_delay = 0
global count = 0

probe begin
{
    printf("begin to inject delay to IO\n");

    %( $# == 1 %?
        type = @1
    %)

    %( $# == 2 %?
        type = @1
        delay = $2
    %)

    %( $# == 3 %?
        type = @1
        delay = $2
        max_delay = $3
    %)

    %( $# == 4 %?
        type = @1
        delay = $2
        max_delay = $3
        dir_name = @4
    %)

    if (max_delay > delay) {
        count = max_delay - delay
    }
}

function delay() {
    udelay(delay+randint(count))
}

function is_target_skipped() {
    if (target() != pid()) {
        return 1
    }
    return 0
}

function hasPrefix(str, prefix) {
    sub = substr(str, 0, strlen(prefix))
    if (prefix == sub) {
        return 1
    }
    return 0
}

probe vfs.write.return {
    if (is_target_skipped() == 1)
        next;

    dentry = @cast(file, "file")->f_path->dentry;
    //inode = @cast(dentry, "dentry")->d_inode;

    path = task_dentry_path(task_current(), dentry, @cast(file, "file")->f_path->mnt)
    if (hasPrefix(path, dir_name) == 0)
        next;

    if ($return < 0)
        next;

    if (type != "w" && type != "rw")
        next;

    delay()
    /*printf("Write file '%s' dir '%s' of size '%d' on device %s return %d\n",
    d_name(dentry), path, @cast(inode, "inode")->i_size,
    kernel_string(@cast(inode, "inode")->i_sb->s_id), $return);*/
}

probe vfs.read.return {
    if (is_target_skipped() == 1)
        next;

    dentry = @cast(file, "file")->f_path->dentry;
    //inode = @cast(dentry, "dentry")->d_inode;

    path = task_dentry_path(task_current(), dentry, @cast(file, "file")->f_path->mnt)
    if (hasPrefix(path, dir_name) == 0)
        next;

    if ($return < 0)
        next;

    if (type != "r" && type != "rw")
        next;

    delay()
    /*printf("Read file '%s' dir '%s' of size '%d' on device %s return %d\n",
    d_name(dentry), path, @cast(inode, "inode")->i_size,
    kernel_string(@cast(inode, "inode")->i_sb->s_id), $return);*/
}
